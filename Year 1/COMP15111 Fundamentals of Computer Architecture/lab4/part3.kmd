KMD
00000000:             ; ; COMP15111 lab 4 - Template file
00000000:             ; 
00000000:             ; print_char      equ     0               ; Define names to aid readability
00000000:             ; stop            equ     2
00000000:             ; print_str       equ     3
00000000:             ; print_no        equ     4
00000000:             ; 
00000000:             ; cLF             equ     10              ; Line-feed character
00000000:             ; 
00000000:             ; 
00000000: E28FD064    ;                 ADR     SP, _stack      ; set SP pointing to the end of our stack
00000004: EA000075    ;                 B       main
00000008:             ; 
00000008:             ;                 DEFS    100             ; this chunk of memory is for the stack
0000006C:             ; _stack                                  ; This label is 'just after' the stack space
0000006C:             ; 
0000006C:             ; 
0000006C: 54 68 69 73 ; wasborn         DEFB    "This person was born on ",0
00000070: 20 70 65 72 ; 
00000074: 73 6F 6E 20 ; 
00000078: 77 61 73 20 ; 
0000007C: 62 6F 72 6E ; 
00000080: 20 6F 6E 20 ; 
00000084: 00          ; 
00000085: 54 68 69 73 ; was             DEFB    "This person was ",0
00000089: 20 70 65 72 ; 
0000008D: 73 6F 6E 20 ; 
00000091: 77 61 73 20 ; 
00000095: 00          ; 
00000096: 20 6F 6E 20 ; on              DEFB    " on ",0
0000009A: 00          ; 
0000009B: 54 68 69 73 ; is              DEFB    "This person is ",0
0000009F: 20 70 65 72 ; 
000000A3: 73 6F 6E 20 ; 
000000A7: 69 73 20 00 ; 
000000AB: 20 74 6F 64 ; today           DEFB    " today!",0
000000AF: 61 79 21 00 ; 
000000B3: 54 68 69 73 ; willbe          DEFB    "This person will be ",0
000000B7: 20 70 65 72 ; 
000000BB: 73 6F 6E 20 ; 
000000BF: 77 69 6C 6C ; 
000000C3: 20 62 65 20 ; 
000000C7: 00          ; 
000000C8:             ;                 ALIGN
000000C8:             ; 
000000C8: 00000017    ; pDay              DEFW  23              ;  pDay = 23    //or whatever is today's date
000000CC: 0000000B    ; pMonth          DEFW    11              ;  pMonth = 11  //or whatever is this month
000000D0: 000007D5    ; pYear             DEFW  2005    ;  pYear = 2005 //or whatever is this year
000000D4:             ; 
000000D4:             ; printdate
000000D4: E1A00006    ;                 MOV     R0, R6
000000D8: EF000004    ;                 SVC     print_no
000000DC: E3A0002F    ;                 MOV     R0, #'/'
000000E0: EF000000    ;                 SVC     print_char
000000E4: E1A00001    ;                 MOV     R0, R1
000000E8: EF000004    ;                 SVC     print_no
000000EC: E3A0002F    ;                 MOV     R0, #'/'
000000F0: EF000000    ;                 SVC     print_char
000000F4: E1A00004    ;                 MOV     R0, R4
000000F8: EF000004    ;                 SVC     print_no
000000FC: E3A0000A    ;                 MOV     R0, #cLF
00000100: EF000000    ;                 SVC     print_char
00000104: E1A0F00E    ;         MOV     PC, LR
00000108:             ; 
00000108:             ; 
00000108:             ; ; def printAgeHistory (bDay, bMonth, bYear)
00000108:             ; 
00000108:             ; ; parameters
00000108:             ; ;  R0 = bDay (on entry, moved to R6 to allow SVC to output via R0)
00000108:             ; ;  R1 = bMonth
00000108:             ; ;  R2 = bYear
00000108:             ; ; local variables (callee-saved registers)
00000108:             ; ;  R4 = year
00000108:             ; ;  R5 = age
00000108:             ; ;  R6 = bDay - originally R0
00000108:             ; 
00000108:             ; 
00000108: E92D0070    ; printAgeHistory STMFD SP!, {R4-R6}                      ; callee saves three registers
0000010C:             ; 
0000010C: E1A06000    ;                 MOV     R6, R0  ; Get parameters
00000110:             ; 
00000110:             ; ;   year = bYear + 1
00000110: E2824001    ;                 ADD     R4, R2, #1
00000114:             ; ;   age = 1;
00000114: E3A05001    ;                 MOV     R5, #1
00000118:             ; 
00000118:             ; ; print("This person was born on " + str(bDay) + "/" + str(bMonth) + "/" + str(bYear))
00000118: E24F00B4    ;                 ADRL    R0, wasborn
0000011C: EF000003    ;         SVC     print_str
00000120: E2444001    ;         SUB R4, R4, #1
00000124:             ;                 
00000124: E92D4000    ;         STMFD SP!, {LR}
00000128: EBFFFFE9    ;                 BL      printdate
0000012C: E8BD4000    ;                 LDMFD SP!, {LR}
00000130:             ; 
00000130: E2844001    ;         ADD     R4, R4, #1
00000134:             ; 
00000134:             ; ; this code does: while year < pYear //{
00000134: E51F006C    ; loop1   LDR     R0, pYear
00000138: E1540000    ;                 CMP     R4, R0
0000013C: 2A00000B    ;                 BHS     end1            ; Years are unsigned
00000140:             ; ; for part 4, should be changed to:
00000140:             ; ; while year < pYear or
00000140:             ; ;                               (year == pYear and bMonth < pMonth) or
00000140:             ; ;                               (year == pYear and bMonth == pMonth and bDay < pDay):
00000140:             ; 
00000140:             ; ;  print("This person was " + str(age) + " on " + str(bDay) + "/" + str(bMonth) + "/" + str(yea
                      ; r))
00000140: E24F00C3    ;                 ADRL    R0, was
00000144: EF000003    ;                 SVC     print_str
00000148: E1A00005    ;                 MOV     R0, R5
0000014C: EF000004    ;                 SVC     print_no
00000150: E24F00C2    ;                 ADRL    R0, on
00000154: EF000003    ;                 SVC     print_str
00000158:             ; 
00000158: E92D4000    ;         STMFD SP!, {LR}
0000015C: EBFFFFDC    ;                 BL      printdate
00000160: E8BD4000    ;                 LDMFD SP!, {LR}
00000164:             ; 
00000164:             ;                 ; year = year + 1
00000164: E2844001    ;                 ADD     R4, R4, #1
00000168:             ;                 ; age = age + 1
00000168: E2855001    ;                 ADD     R5, R5, #1
0000016C:             ;                 ; //}
0000016C: EAFFFFF0    ;                 B       loop1
00000170:             ; 
00000170:             ; end1
00000170:             ; ; this code does: if (bMonth == pMonth):
00000170:             ; ; for part 4, should be changed to:
00000170:             ; ; if (bMonth == pMonth and bDay == pDay):
00000170: E51F00AC    ;                 LDR     R0, pMonth
00000174: E1510000    ;                 CMP     R1, R0
00000178: 1A000008    ;                 BNE     else1
0000017C:             ; 
0000017C:             ; ; print("This person is " + str(age) + " today!")
0000017C: E24F00E9    ;                 ADRL    R0, is
00000180: EF000003    ;                 SVC     print_str
00000184: E1A00005    ;                 MOV     R0, R5
00000188: EF000004    ;                 SVC     print_no
0000018C: E24F00E9    ;                 ADRL    R0, today
00000190: EF000003    ;                 SVC     print_str
00000194: E3A0000A    ;                 MOV     R0, #cLF
00000198: EF000000    ;                 SVC     print_char
0000019C:             ; 
0000019C:             ; ; else
0000019C: EA000009    ;                 B       end2
000001A0:             ; else1
000001A0:             ; ; print("This person will be " + str(age) + " on " + str(bDay) + "/" + str(bMonth) + "/" + str(
                      ; year))
000001A0: E24F00F5    ;                 ADRL    R0, willbe
000001A4: EF000003    ;                 SVC     print_str
000001A8: E1A00005    ;                 MOV     R0, R5
000001AC: EF000004    ;                 SVC     print_no
000001B0: E24F0022    ;                 ADRL    R0, on
000001B4: E2400C01    ; 
000001B8: EF000003    ;                 SVC     print_str
000001BC:             ; 
000001BC: E92D4000    ;                 STMFD SP!, {LR}
000001C0: EBFFFFC3    ;                 BL      printdate
000001C4: E8BD4000    ;                 LDMFD SP!, {LR}
000001C8:             ; 
000001C8:             ; ; }// end of printAgeHistory
000001C8: E8BD0070    ; end2            LDMFD SP!, {R4-R6}              ; callee saved registers
000001CC: E1A0F00E    ;                 MOV     PC, LR
000001D0:             ; 
000001D0: 41 6E 6F 74 ; another         DEFB    "Another person",10,0
000001D4: 68 65 72 20 ; 
000001D8: 70 65 72 73 ; 
000001DC: 6F 6E 0A 00 ; 
000001E0:             ;                 ALIGN
000001E0:             ; 
000001E0:             ; ; def main():
000001E0:             ; main
000001E0: E59F40B8    ;         LDR     R4, =&12345678          ; Test value - not part of Java compilation
000001E4: E1A05004    ;         MOV     R5, R4                  ; See later if these registers corrupted
000001E8: E1A06004    ;         MOV     R6, R4
000001EC:             ; 
000001EC:             ; ; printAgeHistory(pDay, pMonth, 2000)
000001EC: E51F012C    ;                 LDR     R0, pDay        ; Stack first parameter
000001F0: E51F112C    ;                 LDR     R1, pMonth      ; Stack second parameter
000001F4: E3A02E7D    ;                 MOV     R2, #2000       ; Stack third parameter
000001F8: E92D0007    ;         STMFD SP!, {R0-R2}
000001FC: EBFFFFC1    ;                 BL      printAgeHistory
00000200: E8BD0007    ;                 LDMFD SP!, {R0-R2}  ; Deallocate three 32-bit variables
00000204:             ; 
00000204:             ; ; print("Another person");
00000204: E24F003C    ;                 ADRL    R0, another
00000208: EF000003    ;                 SVC     print_str
0000020C:             ; 
0000020C:             ; ; printAgeHistory(13, 11, 2000)
0000020C: E3A0000D    ;                 MOV     R0, #13                 
00000210: E3A0100B    ;                 MOV     R1, #11
00000214: E3A02E7D    ;                 MOV     R2, #2000
00000218: E92D0007    ;                 STMFD   SP!, {R0-R2}            ; The STore Multiple parameter
0000021C: EBFFFFB9    ;                 BL      printAgeHistory
00000220: E8BD0007    ;                 LDMFD SP!, {R0-R2}                      ; Deallocate three 32-bit variables
00000224:             ; 
00000224:             ;         ; Now check to see if register values intact (Not part of Java)
00000224: E59F0074    ;         LDR     R0, =&12345678          ; Test value
00000228: E1540000    ;         CMP     R4, R0                  ; Did you preserve these registers?
0000022C: 01550000    ;         CMPEQ   R5, R0                  ;
00000230: 01560000    ;         CMPEQ   R6, R0                  ;
00000234:             ; 
00000234: 128F0014    ;         ADRLNE  R0, whoops1             ; Oh dear!
00000238: 1F000003    ;         SVCNE   print_str               ;
0000023C:             ; 
0000023C: E24F0F76    ;         ADRL    R0, _stack              ; Have you balanced pushes & pops?
00000240: E15D0000    ;         CMP     SP, R0                  ;
00000244:             ; 
00000244: 128F002A    ;         ADRLNE  R0, whoops2             ; Oh no!!
00000248: 1F000003    ;         SVCNE   print_str               ; End of test code
0000024C:             ; 
0000024C:             ; ; }// end of main
0000024C: EF000002    ;                 SVC     stop
00000250:             ; 
00000250:             ; 
00000250: 0A 2A 2A 20 ; whoops1         DEFB    "\n** BUT YOU CORRUPTED REGISTERS!  **\n", 0
00000254: 42 55 54 20 ; 
00000258: 59 4F 55 20 ; 
0000025C: 43 4F 52 52 ; 
00000260: 55 50 54 45 ; 
00000264: 44 20 52 45 ; 
00000268: 47 49 53 54 ; 
0000026C: 45 52 53 21 ; 
00000270: 20 20 2A 2A ; 
00000274: 0A 00       ; 
00000276: 0A 2A 2A 20 ; whoops2         DEFB    "\n** BUT YOUR STACK DIDN'T BALANCE!  **\n", 0
0000027A: 42 55 54 20 ; 
0000027E: 59 4F 55 52 ; 
00000282: 20 53 54 41 ; 
00000286: 43 4B 20 44 ; 
0000028A: 49 44 4E 27 ; 
0000028E: 54 20 42 41 ; 
00000292: 4C 41 4E 43 ; 
00000296: 45 21 20 20 ; 
0000029A: 2A 2A 0A 00 ; 
0000029E:             ; 
0000029E: 00 00       ; (padding)
000002A0: 12345678    ; Remaining literals

Symbol Table: Labels
: print_char                        00000000  Value
: stop                              00000002  Value
: print_str                         00000003  Value
: print_no                          00000004  Value
: cLF                               0000000A  Value
: _stack                            0000006C  Local -- ARM
: wasborn                           0000006C  Local -- ARM
: was                               00000085  Local -- ARM
: on                                00000096  Local -- ARM
: is                                0000009B  Local -- ARM
: today                             000000AB  Local -- ARM
: willbe                            000000B3  Local -- ARM
: pDay                              000000C8  Local -- ARM
: pMonth                            000000CC  Local -- ARM
: pYear                             000000D0  Local -- ARM
: printdate                         000000D4  Local -- ARM
: printAgeHistory                   00000108  Local -- ARM
: loop1                             00000134  Local -- ARM
: end1                              00000170  Local -- ARM
: else1                             000001A0  Local -- ARM
: end2                              000001C8  Local -- ARM
: another                           000001D0  Local -- ARM
: main                              000001E0  Local -- ARM
: whoops1                           00000250  Local -- ARM
: whoops2                           00000276  Local -- ARM
