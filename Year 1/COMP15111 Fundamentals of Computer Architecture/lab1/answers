Part 1

Q1) After obeying the "LDR R0" instruction, the value of PC is 00000004 and of R0
is 0

Q2) After obeying the "LDR R1" instruction, the value of PC is 00000008 and of R1
is 00000004

Q3) After obeying the "LDR R2" instruction, the value of PC is 0000000C and of R2
is 00000003


(For Q4 and Q5, I am asking about the registers involved in the arithmetic,
not PC/R15)

Q4) The first time the "ADD" instruction is obeyed, the value of register R0
changes from 00000000 to 00000004

Q5) The first time the "SUB" instruction is obeyed, the value of register R2
changes from 00000003 to 00000002


(For Q6, Q7, and Q8, I am asking about the effect of running the program
from the beginning until it stops at the SWI instruction, not about the
effect of just one instruction)

Q6) the "BNE" instruction is obeyed 3 times but only performs the branch 2 times

Only 2 registers (other than the PC register) change value:

Q7) register R2 counts down from 00000003 to 00000000

Q8) the final value of register R0 is the product (hint: arithmetic operation) of memory locations "jill" and "jack"


Part 2

Q9) The memory location for "tom" have the final value of R0 (0000000C) because "STR R0, tom" stores the final value of R0 in "tom" before the program quits using "SVC 2"

Q10) If you reset and run the program again without reloading it then what
happens to the value of "tom" and why: The value of "tom" is now 00000018 which is 24 in decimal, because the program starts with the value of "tom" previously (0000000C) and add the value of "jill" (the value of) "jack" times to it and stores it again in "tom".
